extern crate memmap;
extern crate byteorder;
use std::fs::File;
use std::env;
use std::ffi::CString;
use core::marker::PhantomData;
use std::str::from_utf8;

#[repr(C, packed)]
#[derive(Copy, Clone, Debug)]
struct Section {
    name: [u8; 4],
    length: u32,
}

impl Section {
    fn get_name(&self) -> &str {
        from_utf8(&(self.name[..])).unwrap()
    }

    fn get_length(&self) -> usize {
        self.length as usize
    }
}

#[derive(Clone, Debug, Default)]
struct Font {
    name: String,
    family: String,
    weight: String,
    point_size: u16,
    max_width: u16,
    max_height: u16,
    ascent: u16,
    descent: u16,
}

impl Font {
    fn new(head_ptr: *mut Section) -> Font {
        let font_info = Default::default();
        let mut eof = false;
        let mut ptr = head_ptr;
        unsafe {
            println!("{}, {:x}", (*ptr).get_name(), (*ptr).get_length());
        }
        //while !eof {
            //match unsafe { (*ptr).get_name() } {
                //"FILE" => { println!("found 1"); },
                //"NAME" => { println!("found 2"); },
                //"FAMI" => { println!("found 3"); },
                //"WEIG" => { println!("found 4"); },
                //"SLAN" => { println!("found 5"); },
                //"PTSZ" => { println!("found 6"); },
                //"MAXW" => { println!("found 7"); },
                //"MAXH" => { println!("found 8"); },
                //"ASCE" => { println!("found 9"); },
                //"DESC" => { println!("found 10"); },
                //"CHIX" => {
                    //eof = true;
                    //println!("found 10");
                    //break
                //},
                //_ => break,
            //}

            //let addr = ptr as usize + unsafe { (*ptr).get_length() } as usize;
            //ptr = addr as *mut _;
        //}
        font_info
    }
}


fn main() {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        println!("Only filename expected.");
    }

    let file = unsafe {
        memmap::MmapOptions::new()
        .map(&File::open(&args[1]).unwrap())
        .unwrap()
    };

    let section = Font::new(file.as_ptr() as *mut Section);

    println!("{:?}", file);
}
